#!/usr/bin/perl
=pod

SBX chooser

=head1 NAME

  sbx - Tool voor menu-selectie sandboxes.

=head1 DESCRIPTION

Keuze sandbox en het starten van de shell omgeving.

=head1 .sbxconfig

Configuratie file for your shell environment.

vb
   [foo]
      SBX=$HOME/sbx

=over 12

=item C<[item]>

Menu item shortname

=item C<SBX>

    Root of your sandbox
    The 'sb' alias return you to your sandbox.


=back

=head1 LICENSE

=head1 AUTHOR

Hans Mulder - H_Mulder@belastingdienst.nl

=head1 SEE ALSO

=cut

#
# GLOBALS in GLB
my %GLB=(
            hostname => 'localhost',
            DBG => '1'
          );
$GLB{hostname}=`hostname`;
$GLB{uname}=`uname`;
chomp $GLB{uname};
chomp $GLB{hostname};

package trace;
sub info(@)
{
    print "info: @_\n" if defined $GLB{'DBG'};
}
sub dbg(@)
{
    print "debug: @_\n" if defined $GLB{'DBG'};
}
sub hdr(@)
{
    my $hdr=shift;
    info('---------------'.$hdr.'---------------');
}

sub hash_list($)
{
  my $grp=shift;
  foreach my $item( sort keys $grp ){
    trace::info( sprintf ("  %-20s = %s",$item,$grp->{$item}) );
  }
}
#
#Terminal stuff
#- Prompt
#- Colors
package TERM;
my %color=(
        test => "\e[49;44m",
        bluebackgr => "\e[49;44m",
        yellowbackgr => "\e[49;43m",
        green => "\e[49;32m",
        greenbackgr => "\e[49;42m",
        redbackgr => "\e[49;41m",
        white => "\e[49;37m",
        lblue => "\e[49;36m",
        purple => "\e[49;35m",
        blue => "\e[49;34m",
        yellow => "\e[49;33m",
        red => "\e[49;31m"
        );
sub color_normal()
{
        return '^[[0m';
}
sub prompt()
{
    #export PS1="$(printf "${TITLE}$HOSTNAME:\$PWD>")"
    my $hostname=`hostname`;
    chomp $hostname;
    $ENV{PS1}  ="\\[\033]2;\${USER}@\${HOSTNAME} SBX \${SBX}\007\\]";#TITLE
    $ENV{PS1} .='\\['.$color{yellow}.'\\]'.$hostname.':${PWD} SB'.'\['.$color{white}.'\]'.'>';#path
}

sub title(@)
{
    #print "Set Title\n";
    #print("\e]2;test3\7");
	#print "\033]2;test1\007";
	#print "\033]2;test2\007";
	#print "\c]2;test4\a";

    #system('echo','\033]0;${USER}@${HOST}\007');
    #system('export','SBX=test');
    $ENV{SBX}="@_";
}
#
#Registry stuff
#
package Win;
#use Data::Dumper;
#use Win32::Registry;
my $reg='/cygdrive/c/Windows/System32/reg.exe';
#REG QUERY "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment" /s 
sub Query($)
{
  my $key=shift;
  my $q=$reg.' QUERY "'.$key.'" /s';
  my %keys;
  open(my $fh, '-|', $q) or die $!;
  while (my $l=<$fh>) {
    chomp $l;
    next if not $l =~ m/REG_/;
    #print "DBG:$l\n";
    my ($reg,$type,$val)=split(' ',$l,3);
    #print "DBG:reg $reg,$type,$val\n";
    $val =~ s/\r$//;
    $keys{$reg}= $val;
    #print 'DBG::$keys{'.$reg.'}="'.$val."\"\n";
  }
  close $fh;
  #print "DBG:env==>".Dumper(\%keys)."\n";
  return %keys;
}

#
#Windows env is case insensitive
#
sub set_env($$)
{
    my ($env,$val)=@_;
    my $var_set=0;
    foreach( keys %ENV ){
      if(/^$env$/i){
          print "DBG:set $_($env) to '$val'\n";
          $ENV{$_}=$val;
          $var_set=1;
          last;
      }
    }
    $ENV{$env}=$val if not $var_set;
    print "DBG:set $env='$val' and found '$ENV{$env}\n";
}
#
#CONFIG
#
package CONFIG;
#use Data::Dumper;

my %CFG=();
sub  trim { my $s = shift; $s =~ s/^\s+|\s+$//g; return $s };

#
#
# import .sbxconfig -into-> %CFG
#
sub import()
{
  my $config_file="$ENV{HOME}/.sbxconfig";
  my $label="global";#default environment
  open CONFIG, $config_file or die "Could not open '$config_file':$!";
  while( <CONFIG> ){
    chomp;
    next if /^#/;#skip comment starting with #
    #$label = s/(^\[)||(\]$)// if /^\[/ ;
    s/[^\\]#.*//;  #strip comment
    if( m/^\[/ ){
      s/(^\[)||(\]$)//g;
      $label=$_;
    };
    if( m/=/ ){
      my ($var,$val)=split(/=/);
      $CFG{$label}{trim $var}= trim $val;
    }
  }
  #
  #print "user_config".Dumper(\%CFG)."\n";
    
  close CONFIG;
}

#
# inject deps into given group
#
sub inject($)
{
  my $item=shift;
  my $grp=$CFG{$item};

  my $grp=$CFG{$item};
  trace::hdr('Items from sbxconfig');
  trace::hash_list($grp);

  SBX::set_type();
  #print "user_config".Dumper($grp)."\n";
  #print "grp is $group ";
  #print "NODEPS $CFG{$grp}{'cfg.deps'}\n" if not $CFG{$grp}{'cfg.deps'};
  return 0 if not $grp->{'cfg.deps'};
  #print "DBG:cfg.deps $grp->{'cfg.deps'}\n";
  my @deps=split /,/, $grp->{'cfg.deps'};
  foreach my $item( @deps ){
      #print "deps = $item\n";
      #print "importing ".Dumper(\%CFG)."\n";
      my $ext_grp=$CFG{$item};
      #print "importing ".Dumper($ext_grp)."\n";
      foreach( keys %$ext_grp ){
	      #print "keys = $_\n";
        $grp->{$_}=$ext_grp->{$_};
      }
  }
  #print "importing ".Dumper(\%CFG)."\n";
  #trace::dbg('GRP items');
  #foreach my $item( @deps ){
  #}
  trace::hdr("Items from sbxconfig");
  trace::hash_list($grp);
}

sub get_cfg()
{
  return \%CFG;
}
sub get_group($)
{
  my $group=shift;
  return $CFG{$group};
}

#
#MENU
#
package MENU;
sub get_items()
{
  #TODO filter op menu
  my @items=();
  foreach my $grp ( sort keys %CFG ){
    push @items, $grp if $CFG{$grp}{'cfg.menu'} eq 'true';
  }
  return @items;
}
sub ls()
{
  my @options=get_items();
	my $nr=1;
	#print "user_menu".Dumper(\%menu)."\n";
	foreach(@options){
		print $nr++.") $_ ";
		print ":$CFG{$_}{'cfg.info'}";
		print "\n";
	}
}
sub menu()
{
  my @options=get_items();

  ls();#TODO options meegeven

	my $choice;
	while(1){
        	print "Select one [1..".(scalar @options).']?';
        	$choice=<STDIN>;
		chomp $choice;
		$choice=1 if $choice eq '';#default
		last if $choice > 0 and $choice <= @options ;
	};

	return $options[$choice-1];
}

#
#Environment
#
package ENV;
#use Data::Dumper;
my %LOC_ENV=();

#
#import : environment substitute in LOC_ENV, with values from {LOC_ENV,ENV}
#
sub sub_vars($)
{

  trace::hdr('substitue vars');
  my $found=0;
  do{
    $found=0;
    foreach my $var ( keys %LOC_ENV ) {
      #$ENV{$_}=$env->{$_};
      #print "DBG:test $var\n";
      if( $LOC_ENV{$var} =~ m/\$\{([^}]*)\}/ ){
          my $varvar=$1;
          if(  $LOC_ENV{$varvar} or  $ENV{$varvar} )
          {
            trace::dbg( "translated $varvar from $var = $LOC_ENV{$var}");
            $LOC_ENV{$var} =~ s/\$\{$varvar\}/$LOC_ENV{$varvar}/ if  $LOC_ENV{$varvar};
            $LOC_ENV{$var} =~ s/\$\{$varvar\}/$ENV{$varvar}/ if  $ENV{$varvar};
            $found=1;
            trace::dbg("translated $varvar  to $var = $LOC_ENV{$var}");
          }else{
            print "WARNING: no environment var set for $varvar  in $var='$LOC_ENV{$var}'\n";
          }
          #TODO failsave loop detection
        }
    }
  }while($found);
  #print "DBG:en sub_vars()\n";
}
#
# substitute %var%  into var
#
sub sub_win_env()
{
  my $found=0;
  trace::hdr('substitue vars');
  do{
    $found=0;
    foreach my $var ( keys %LOC_ENV ) {
      #print "DBG:test $var\n";
      if( $LOC_ENV{$var} =~ m/\%([^%]*)\%/ ){
          my $varvar=uc $1;
          if( $LOC_ENV{$varvar} ){
            $LOC_ENV{$var} =~ s/\%$varvar\%/$LOC_ENV{$varvar}/ig;
            trace::dbg("found $varvar=$LOC_ENV{$varvar}");
            trace::dbg("set LOC_ENV $var=$LOC_ENV{$var}");
            $found=1;
          }else{
            print "WARNING: no environment var set for $varvar  in $var='$LOC_ENV{$var}'\n";
          }
        }
    }
  }while($found);
}

#
# Export LOC_ENV to ENV
#
sub export()
{
   trace::hdr('export LOC_ENV to your process environment');
   foreach my $var( keys %ENV ){
      my $uc_var = uc $var;
      if( $LOC_ENV{$uc_var} ){
        trace::dbg(sprintf(" %-20s  = %s",$var,$LOC_ENV{$uc_var})); 
        $ENV{$var}=$LOC_ENV{$uc_var};
        delete $LOC_ENV{$uc_var};
      }
   }
   foreach my $var( keys %LOC_ENV ){
     trace::dbg(sprintf("E %-20s  = %s",$var,$LOC_ENV{$uc_var})); 
     $ENV{$var}=$LOC_ENV{$var};
   }
}
#
# Exports environment (var starting with env.) to local environment LOC_ENV
# 
sub export_grp($)
{
  my $sbx=shift;
  my $sbx_cfg=CONFIG::get_group($sbx);

  #
  #Import process environment
  #
  foreach ( keys %ENV )
  {
    set($_,$ENV{$_});
  }
  trace::hdr("imported process environment");
  trace::hash_list(\%LOC_ENV);
  #print "DBG:sbx_cfg".Dumper($sbx_cfg)."\n";
  #TODO mbv export
  trace::hdr("importing cfg environment");
  foreach my $var( keys %$sbx_cfg ) {
    next if not $var =~ /^env./;
    my $env_var=$var; $env_var =~ s/^env\.//;
    #print "DBG:export $env_var, from $ENV{$env_var} to $sbx_cfg->{$var}\n";
    $ENV{$env_var}=$sbx_cfg->{$var};
    set($env_var,$sbx_cfg->{$var});
  }
}
sub set($$)
{
    my($var,$val)=@_;
    $var = uc $var if SBX::get_type() eq 'dos';
    $LOC_ENV{$var}=$val;
    trace::dbg( sprintf("  LOC_ENV(%s) %-20s  = %s",SBX::get_type(),$var,$val));
}

sub get($)
{
    my($var)=@_;
    $var = uc $var if SBX::get_type() eq 'dos';
    return $LOC_ENV{$var};
}
#
# import hash into LOC_ENV
#
sub import($)
{
  #print "DBG:env".Dumper(\@_)."\n";
  my $env=shift;
  #print "DBG:env".Dumper($env)."\n";
  #chdir("/tmp/abc");
  foreach( keys %$env ) {
    if( m/^TE{0,1}MP$/
        || m/^HOME$/
      ){
      #TMP en TEMP are prepended by pwd
      trace::dbg( "FOUND and skipping $_=$ENV{$_}");
      next;
    }
    #$ENV{$_}=$env->{$_};
    #Win::set_env($_,$env->{$_});
    #TODO bypass preserve cases
    delete $ENV{uc $_} if $ENV{uc $_};#voorkom name clashes
    $ENV{$_}=$env->{$_};
    set($_,$env->{$_});
    #print "DBG:ENV:import glob $_  = loc $ENV{$_} =  val $env->{$_}\n";
  }

}
#
# Start shell
# Depends on cfg.type
# sh  : start sh
# cmd : start dos cmd.exe
sub start($)
{
  my $group=shift;
  my $env=CONFIG::get_group($group);
  trace::hdr('starting shell');
  #TODO start shell
  die "Can not find dir '$LOC_ENV{SBXROOT}', verify your SBXROOT?\n" if not -d $LOC_ENV{SBXROOT};
  chdir( "$LOC_ENV{SBXROOT}" ) or die "$!";
  #print "DBG:chdir to '$ENV{SBXROOT}'\n";
  for( $env->{'cfg.type'} ){
    shell_sh()  if /^sh$/ ;
    shell_dos()  if /^dos$/ ;
    shell_bash()  if /^bash$/ ;
    shell_rlwrap()  if /^rlwrap$/ ;
    system( '/cygdrive/c/Windows/System32/cmd.exe')  if /^cdos$/ ;
    break;
  }
  #print "DBG:chdir( $ENV{SBXROOT} )\n";
  #system('sh');
}

sub get_winpath($)
{
    my $path=shift;
    print "from $path ";
    $path=`/cygdrive/c/ws/cygwin/bin/cygpath -w '$path'`;
    chomp $path;
    print "to '$path' \n";
    return $path;
}
sub tune_windows_env()
{
    trace::hdr("Tuning windows environment");
    die "ERR:env USER not set" if not $ENV{USER};
    #set('APPDATA',get_winpath("/Users/$ENV{USER}/AppData/Roaming")) if not $ENV{APPDATA};
    #TODO bypass preserve cases
    set('CommonProgramFiles',get_winpath("/cygdrive/c/Program Files/Common Files")) if not $ENV{'CommonProgramFiles'};
    $ENV{'CommonProgramFiles'}= 'bypass';
    set('USERPROFILE',get_winpath("/Users/$ENV{USER}"))  if not $ENV{USERPROFILE};
    #set('LOCALAPPDATA',get_winpath("/Users/$ENV{USER}/AppData/Local")) if not $ENV{LOCALAPPDATA};
    set('USERNAME',${USER}) if not $ENV{USERNAME} = $ENV{USER};

    #TODO tijdelijk env fixes
    delete $ENV{COMSPEC};
    delete $ENV{INFOPATH}; delete $LOC_ENV{INFOPATH};
    delete $ENV{LANG}; delete $LOC_ENV{LANG};
    delete $ENV{MAIL};delete $LOC_ENV{MAIL};
    delete $ENV{MANPATH}; delete $LOC_ENV{MANPATH};
    delete $ENV{PROGRAMFILES}; delete $LOC_ENV{PROGRAMFILES};
    delete $ENV{SYSTEMDRIVE}; delete $LOC_ENV{SYSTEMDRIVE};
    delete $ENV{LOGNAME};
    delete $ENV{TZ};
    set('ProgramFiles','C:\\Program Files');
    $ENV{'ProgramFiles'}= 'bypass';
    set('SystemDrive','C:');
    $ENV{'SystemDrive'}= 'bypass';

    #Zou hier moeten staan: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\
    delete $ENV{SYSTEMROOT}; delete $LOC_ENV{SYSTEMROOT};
    set('SystemRoot','C:\\Windows');
    $ENV{'SystemRoot'}= 'bypass';


    #$ENV{WinDir}=$ENV{WINDIR};delete $ENV{WINDIR};

    #TODO
    #Source not known
    set('ComSpec','C:\\Windows\\system32\\cmd.exe');
    #$ENV{'ComSpec'}='C:\\Windows\\system32\\cmd.exe';
    #set('HOMEDRIVE','N:');
    #set('HOMEPATH','\\');
    #Win::set_env('HOMESHARE','\\\\ob300vfsw12f\\ob300vfsw12f.USR\\muldh23');
    #Win::set_env('LOGONSERVER','\\\\OB309VDCW12F');
    set('ProgramData','C:\\ProgramData');
    $ENV{'ProgramData'}= 'bypass';
    set('PSModulePath','C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\');
    set('PUBLIC','C:\\Users\\Public');
    set('SESSIONNAME','Console');
    #Win::set_env('USERDNSDOMAIN','ONT.BELASTINGDIENST.NL');
    #Win::set_env('USERDOMAIN_ROAMINGPROFILE','ONT');
    #Win::set_env('USERDOMAIN=','ONT');

    #delete $ENV{BASH};delete $LOC_ENV{BASH};
}

sub shell_bash()
{
  if( not $ENV{ENV} and -f "$ENV{SBXROOT}/.sbx_env" ){
	  $ENV{ENV}=$ENV{SBXROOT}.'/.sbx_env';
  }
  $ENV{PS1}='${SBX:+($SBX)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ';
  $ENV{PS1}='\$ ';
  printf "set PS1 in '$ENV{PS1}'\n";
  $ENV{BASH_ENV}=$ENV{ENV};
  $ENV{debian_chroot}=$ENV{SBX};
  system('bash','--rcfile',$ENV{ENV});
}

sub shell_sh()
{
  #set ENV if noet set and files exists
  if( not $ENV{ENV} and -f "$ENV{SBXROOT}/.sbx_env" ){
	  $ENV{ENV}=$ENV{SBXROOT}.'/.sbx_env';
  }
  TERM::prompt();
  system('sh');
}
sub shell_rlwrap()
{
  print "DBG:enter shell_rlwrap()\n";
    my %env=Win::Query( 'HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment');
    ENV::import(\%env);
    %env=Win::Query( 'HKCU\Environment');
    ENV::import(\%env);
    #Hacking my PATH
    #delete $ENV{PATH};delete $ENV{Path};
    #my $PATH=$env{Path};
    $LOC_ENV{PATH}=$LOC_ENV{PATH}.';'.$env{Path};
    #$env{Path}=~ s/%SystemRoot%/C:\\windows/g;
    tune_windows_env();
    ENV::sub_win_env();
    #$SBXROOT="'$SBXROOT'";
    #$SBXROOT=~ s#\\#/#g;
    my $TASTE=`/cygdrive/c/ws/cygwin/bin/cygpath -t unix '$ENV{WTLSBTU_Location}/nt/bin/cmdbox.cmd'`;
    chomp $TASTE;
    my $SBXROOT=`/cygdrive/c/ws/cygwin/bin/cygpath -w '$ENV{SBXROOT}'`;
    chomp $SBXROOT;


    #system('prompt $P$S%SBX%$G');
    #system('rlwrap -pblue -i -S "$(pwd) $SBX: " /cygdrive/c/Windows/System32/cmd.exe');
    my @cmd=('/cygdrive/c/ws/cygwin/bin/rlwrap','-pblue', '-i', '-c',$TASTE, $SBXROOT);
    print "DBG:system(@cmd);\n";
    #system('rlwrap -pblue -i -c '."'$TASTE' $ENV{SBXROOT}") and die "ERR last system call $!";
    system(@cmd) and die "ERR last system call '@cmd' $!";
    print "DBG:return to cygwin\n";
}

sub shell_dos()
{
    trace::hdr( "start shell::DOS");
    my $PATH="";
    $PATH=$LOC_ENV{PATH};

    trace::hdr( "import windows user session environment");
    my %env=Win::Query( 'HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment');
    $PATH.=";".$env{Path} if $env{Path};
    ENV::import(\%env);

    trace::hdr( "import windows system environment");
    %env=Win::Query( 'HKCU\Environment');
    $PATH.=";".$env{Path} if $env{Path};
    ENV::import(\%env);

    trace::hdr( "import windows user environment");
    %env=Win::Query( 'HKCU\Volatile Environment');
    $PATH.=";".$env{Path} if $env{Path};
    ENV::import(\%env);

    tune_windows_env();

    #$LOC_ENV{PATH}=$PATH;
    #TODO why?
    ENV::set('PATH',$PATH);;
    ENV::sub_win_env();
    ENV::export();

    system('/cygdrive/c/Windows/System32/cmd.exe');
}
#
# SBX utilities
#
package SBX;
#use Data::Dumper;
sub ls()
{
	print "Sandbox list:\n";
  MENU::ls();
}
sub info()
{
	print "Sandbox '$ENV{SBX}' info:\n";
	print "Doesn't look like a sandbox, environment not set SBX='$ENV{SBX}'\n" if not $ENV{SBX};

	print "Environment:\n";
  CONFIG::import();
  CONFIG::inject($ENV{SBX});
  my $env=CONFIG::get_group($ENV{SBX});
  SBX::print_env(sort keys %$env);
  #foreach my $var( sort keys %$env ) {
  #printf ("%18s = '%s'\n",$var,$env->{$var});
  #}

	if( -e "$ENV{ENV}" ){
		print "INFO from '$ENV{ENV}'\n";
		my @info=grep(!/#INFO_/,`sed -n '/INFO_START/,/INFO_STOP/p' '$ENV{ENV}'`);
		foreach ( @info ){
      print "  $_";
    }
	}
}

#TODO use by info
sub print_env(@)
{
        foreach( @_ ){
                printf ("%18s = %s\n",$_,$ENV{$_}) if $ENV{$_};
        }
}
#TODO use by cfg.deps.tools
sub print_where($)
{
        my $file=shift;
        my $where=`which 2>/dev/null '$file'`;
        chomp $where;
        if ( not -f $where ){
                $where=' - not found or readable';
        }
        printf("%18s =  %s\n",$file,$where);
}
my $type;
sub get_type()
{
    return $type;
}
sub set_type()
{
  my $sbx=$CFG{$ENV{SBX}};
  $type=$sbx->{'cfg.type'};
  trace::dbg( "type=$sbx->{'cfg.type'};");
}
#
# Starting procedure SBX
sub start($)
{
  my $SBX=shift;
  $ENV{SBX}=$SBX;
  trace::dbg( "choice=$SBX");
  CONFIG::inject($SBX);  #inject cfg dependencies
  ENV::export_grp($SBX); #export cfg env to LOC_ENV
  ENV::sub_vars($SBX);   #substitute vars in LOC_ENV
  #ENV::export();     #export LOC_ENV to ENV
  ENV::start($SBX);
}
#
# MAIN
# 
package MAIN;
#use Data::Dumper;

if( $ENV{SBX} ) {
  print "Inside sandbox! Name is SBX='$ENV{SBX}'\n";
  exit 1;
}

CONFIG::import();#import .sbxconfig --> %CFG
for( $ARGV[0] ){
  chomp;
  trace::dbg( "argv is '$_'" );
  last if not length $_;
	/^info$/ and do { SBX::info(); exit 0;};
	/^ls$/   and do { SBX::ls()  ; exit 0;}; 
  SBX::start($_);
  exit 0;
}


my $choice=MENU::menu();
SBX::start($choice);
